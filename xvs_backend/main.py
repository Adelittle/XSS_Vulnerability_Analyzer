# Start Flask
#   cd to backend directory
#   1. env\Scripts\activate
#   2. flask run (debug mode will be off)
#      - py main.py (debug on)

# Stop Flask
#   1. ctrl+C
#   2. deactivate
from flask import Flask, request, session, jsonify
from html.parser import HTMLParser
from flask_cors import CORS


app = Flask("__name__")
CORS(app)

class MyHTMLParser(HTMLParser):
  # RULE #1 - HTML Escape Before Inserting Untrusted Data into HTML Element Content
  htmlEscape = "html_escape("
  # RULE #2 - Attribute(html?) Escape Before Inserting Untrusted Data into HTML Common Attributes
  complexAttrs = ["href", "src", "style", "events"]
  # Validator.IsValidURL(userURL, 255)
  # if (isValidURL) { <a href = "<%=encoder.encodeForHTMLAttribute(userURL)%>" > link < /a >}
  # specify doc charset: <meta charset="utf-8">
  charset = "utf-8"
  # RULE #3 - JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values
  jsData = ["alert(", "=", "window", ]  # +event handlers
  jsEscape = ["escape(", "encodeURIComponent(", ]
  # RULE #3.1 - HTML escape JSON values in an HTML context and read the data with JSON.parse
  # Content-Type: application/json; charset=utf-8
  jsonContent = ["Content-Type", "JSON.parse", "%="]
  # +JSON serialization
  # RULE #4 - CSS Escape And Strictly Validate Before Inserting Untrusted Data into HTML Style Property Values
  complexProps = ["url", "behavior", "custom"]
  urlUntrust = ["javascript:", "expression("]
  cssEscape = "CSS.escape("
  # RULE #5 - URL Escape Before Inserting Untrusted Data into HTML URL Parameter Values
  uriEscape = "encodeURI("
  # RULE #6 - Sanitize HTML Markup with a Library Designed for the Job
  # HtmlSanitizer
  # RULE #7 - Avoid JavaScript URL's
  inputAttrs = ["pattern",  "max", "maxlength", "step"]

  def __init__(self):
    HTMLParser.__init__(self)
    self.data = []

  output = []

  def handle_starttag(self, tag, attrs):
      print("Encountered a start tag :", tag)
      if(attrs):
        print(tag, "attributes : ")
        for attr in attrs:
          print("\tattribute :", attr[0], ", value :", attr[1])

      if(tag == "input"):
        print(attrs)
        l = [a[0] for a in attrs]
        if [True for i, a in enumerate(attrs) if a[0] == "type" and a[1] == "text"]:
          for attr in self.inputAttrs:
            if not attr in l:
              fix = "%s needed at line %d, offset %d" %(attr, self.getpos()[0], self.getpos()[1])
              print(fix)
              self.data.append(fix)

  def handle_startendtag(self, tag, attrs):
      print("Encountered an end tag :", tag)

  def handle_data(self, data):
      print("Encountered some data :", data)
      #self.data.append(data)


@app.route("/")
def index(): 
  return "<h1>Flask Running</h1>"



@app.route("/analyze", methods=["POST", "GET"])
def analyze():
  parser = MyHTMLParser()
  if request.method == "POST":
    print("\nRecieved POST Request\n")
    print("JSON?")
    print(request.is_json)
    content = request.get_json()
    print(content)

    print("Data:\n" + content["data"] + "\n")
    parser.feed(content["data"])
    session["data"] = "\n".join(parser.data)

    return jsonify({"status": "Post Request Success", "data": session["data"]})

  if request.method == "GET":
    print("Recieved GET Request")
    print(session.get("data"))

    return jsonify({"status": "GET Request Success", "data": content})

  return "Analyzing..."


if __name__ == "__main__":
    app.secret_key = 'super secret key'
    # app.config['SESSION_TYPE'] = 'filesystem'
    app.debug = True
    app.run()



# Installed:
#   py -m pip install -U autopep8
#   pip install html.parser 
#   pip install -U flask-cors
