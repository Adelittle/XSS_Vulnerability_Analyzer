# Start Flask
#   cd to backend directory
#   1. env\Scripts\activate
#   2. flask run (debug mode will be off)
#      - py main.py (debug on)

# Stop Flask
#   1. ctrl+C
#   2. deactivate
from flask import Flask, request, session, jsonify
from html.parser import HTMLParser
from flask_cors import CORS
import re


app = Flask("__name__")
CORS(app)

class MyHTMLParser(HTMLParser):
  # RULE #1 - HTML Escape Before Inserting Untrusted Data into HTML Element Content
  htmlEscape = {"html_escape":"*PHP* to escape special characters with HTML entity encoding to prevent switching into execution context",
    "custom_escape":"*js*to escape special characters to prevent switching into execution context (some exceptions)",
    "*":"* in place of function if exception for complex attributes"}
  # RULE #2 - Attribute Escape Before Inserting Untrusted Data into HTML Common Attributes(html)
  complexAttrs = ["href", "src", "style", "events"]
  # Validator.IsValidURL(userURL, 255)
  # if (isValidURL) { <a href = "<%=encoder.encodeForHTMLAttribute(userURL)%>" > link < /a >}
  # specify doc charset: <meta charset="utf-8">
  charset = {"charset": "(i.e. utf=8, ISO-8859-1) to prevent content interpretation vulnerabilities"}
  # RULE #3 - JavaScript Escape Before Inserting Untrusted Data into JavaScript Data Values
  jsData = ["alert(", "=", "window", ]  # +event handlers
  jsURIEscape = ["encodeURIComponent(", ]
  # RULE #3.1 - HTML escape JSON values in an HTML context and read the data with JSON.parse
  # Content-Type: application/json; charset=utf-8
  jsonContent = ["Content-Type", "JSON.parse", "%="]
  # +JSON serialization
  # RULE #4 - CSS Escape And Strictly Validate Before Inserting Untrusted Data into HTML Style Property Values
  complexProps = ["url", "behavior", "custom"]
  urlUntrust = ["javascript:", "expression("]
  cssEscape = "CSS.escape("
  # RULE #5 - URL Escape Before Inserting Untrusted Data into HTML URL Parameter Values
  uriEscape = "encodeURI("
  # RULE #6 - Sanitize HTML Markup with a Library Designed for the Job
  # HtmlSanitizer
  # RULE #7 - Avoid JavaScript URL's
  inputAttrs = {"pattern":"to help with input validation.",
    "max":"to limit length of value if expecting specific value range", 
    "form":"ensures the data is submitted for the correct form"}
  
  def __init__(self):
    HTMLParser.__init__(self)
    self.data = []

  def handle_starttag(self, tag, attrs):
      if(attrs):
        print(tag, "attributes : ")
        for attr in attrs:
          print("\tattribute :", attr[0], ", value :", attr[1])
      attrNames = [a[0] for a in attrs]

      # input validation
      if(tag == "input"):
        print(attrs)
        if [True for i, a in enumerate(attrs) if a[0] == "type" and a[1] == "text"]:
          for attr in self.inputAttrs:
            if not attr in attrNames:
              fix = "%s attribute needed at line %d: %s" %(attr, self.getpos()[0], self.inputAttrs[attr])
              print(fix)
              self.data.append(fix)

      # charset configuration
      if(tag == "meta"):
        if ("charset" not in attrNames):
          fix = "charset attribute needed at line %d: %s" % (
              self.getpos()[0], self.charset["charset"])
          print(fix)
          self.data.append(fix)

  def handle_startendtag(self, tag, attrs):
      print("Encountered an end tag :", tag)

  def HTMLEscapeHelper(self, data, vulnVars, vulnStmt, foundStr):
    untrust = False
    fix = []
    vulnFound = []
    for vulnVariable in vulnVars:
      reg = re.compile("var\s+"+vulnVariable +
                       "\s*=\s*\w*\(*document.getElementBy\S+\.value")
      vulnerable = reg.search(data)
      if(vulnerable):
          untrust = True
          vulnFound.append(vulnVariable)
          if(vulnFound):
            for es in self.htmlEscape:
              reg = re.compile("var\s+"+vulnVariable+"\s*=\s*" +
                               re.escape(es)+"\(\s*document.getElementBy\S+\.value\)")
              vulnFixed = reg.search(data)
              if vulnFixed:
                untrust = False
    if(vulnFound):
      vulnFound = ", ".join(list(set(vulnFound))) + foundStr + " block at line %d," % (self.getpos()[0])
      fix.append(vulnFound)
    if (untrust):
      for es in self.htmlEscape:
        fix.append("--->%s needed for block: %s" % (
            es, self.htmlEscape[es]))
      attrExcept = "* Exceptions include: " + ", ".join(self.complexAttrs)
      fix.append(attrExcept)
      print(fix)
      fix = ["\n".join(fix)]
      self.data.extend(fix)

  def handle_data(self, data):
    # Rule 1: inserting untrusted data into HTML element content
    rule1Stmt = "document.getElementBy\w+\(\"\S+\"\).(?:innerHTML|text)\s*=\s*(.*?)(?:\s|$|;)"
    rule1Str = " vulnerable to HTML element content injection:"
    reg = re.compile(rule1Stmt)
    vulnVars = reg.findall(data)
    if(vulnVars):
      self.HTMLEscapeHelper(data, vulnVars, rule1Stmt, rule1Str)

    # Rule 2: inserting untrusted data into attr
    rule2Stmt = "document.getElementBy\w+\(\"\S+\"\).setAttribute\(\S+,\s?(\w+)\)(?:\s|$|;)"
    # rule2Stmt = ".setAttribute\S+\s+"
    rule2Str = " vulnerable to attribute injection:"
    reg = re.compile(rule2Stmt)
    vulnVars = reg.findall(data)
    if(vulnVars):
      self.HTMLEscapeHelper(data, vulnVars, rule2Stmt, rule2Str)    

@app.route("/")
def index(): 
  return "<h1>Flask Running</h1>"



@app.route("/analyze", methods=["POST", "GET"])
def analyze():
  parser = MyHTMLParser()
  if request.method == "POST":
    print("\nRecieved POST Request\n")
    print("JSON?")
    print(request.is_json)
    content = request.get_json()
    print(content)

    print("Data:\n" + content["data"] + "\n")
    parser.feed(content["data"])
    if(parser.data):
      session["data"] = parser.data
    else:
      session["data"] = ["no vulnerabilities analyzed"]

    return jsonify({"status": "Post Request Success", "data": session["data"]})

  if request.method == "GET":
    print("Recieved GET Request")
    print(session.get("data"))

    return jsonify({"status": "GET Request Success", "data": content})

  return "Analyzing..."


if __name__ == "__main__":
    app.secret_key = 'super secret key'
    # app.config['SESSION_TYPE'] = 'filesystem'
    app.debug = True
    app.run()



# Installed:
#   py -m pip install -U autopep8
#   pip install html.parser 
#   pip install -U flask-cors
