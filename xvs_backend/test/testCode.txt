** tags must be closed for parser to work correctly **
** if html content/attr set, get/set value same block **

// charset= always set document charecter encoding Rule
<meta>
</meta>

// Rule 1: HTML inner content = userInput
<Script>
// vulnerable html
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("myDIV").innerHTML = fieldValue
</Script>
// fix = var fieldValue=html_escape(document.getElementById('Length').value)

// Rule 2: HTML attribute = userInput
<Script>
// vulnerable js
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("Label").setAttribute('maxlength', fieldValue)
</Script>
// fix = var fieldValue=html_escape(document.getElementById('Length').value)

**Closing Parenthesis needed**
**Syntax Rules apply for proper analysis**

<Script>
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("myDIV").innerHTML = fieldValue;
  var fieldValue=html_escape(document.getElementById('Length').value);
  document.getElementById("Label").setAttribute('maxlength', fieldValue);
</Script>
// will return no vulnerabilities because of multiple declaration of fieldValue
// to fix: change one of the variable names
// fixing syntax highlighter in react:app.js might indicate this to user

//Rule 3: Dynamic js
  <script>
    function myFunction() {
      //indicates vuln script: fixed by escaping js
      var testVar = document.getElementById("test").value;
      var script= document.createElement('script');
      script.innerHTML = "alert(\""+testVar+"\");";
      
      //indicates possible vuln script: fixed by js escape
      var testVar2 = document.getElementById("test").value;    
      myscript.innerHTML = "alert(\""+testVar2+"\");"; 
      
      //indicates possible vuln script: fixed by *
      var testVar3 = document.getElementById("test").value;    
      mydiv.innerHTML = "alert(\""+testVar3+"\");";         
    }
  </script>