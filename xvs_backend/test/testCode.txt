// Rule 1: HTML inner content = userInput
<Script>
// vulnerable js
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("myDIV").innerHTML = fieldValue
</Script>
// fix = var fieldValue=html_escape(document.getElementById('Length').value)

// Rule 2: HTML attribute = userInput
<Script>
// vulnerable js
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("Label").setAttribute('maxlength', fieldValue)
</Script>
// fix = var fieldValue=html_escape(document.getElementById('Length').value)

**Closing Parenthesis needed**
**Syntax Rules apply for proper analysis**

<Script>
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("myDIV").innerHTML = fieldValue;
  var fieldValue=html_escape(document.getElementById('Length').value);
  document.getElementById("Label").setAttribute('maxlength', fieldValue);
</Script>
// will return no vulnerabilities because of multiple declaration of fieldValue
// to fix: change one of the variable names
// fixing syntax highlighter in react:app.js might indicate this to user