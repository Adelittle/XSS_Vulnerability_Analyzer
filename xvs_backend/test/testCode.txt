** tags must be closed for parser to work correctly **
** if html content/attr set, get/set value same block **
**Closing Parenthesis needed**
**Syntax Rules apply for proper analysis**

// charset= always set document charecter encoding Rule
<meta>
</meta>
***************************************
// Rule 1: HTML inner content = userInput
<Script>
// vulnerable html
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("myDIV").innerHTML = fieldValue
</Script>
// fix = var fieldValue=html_escape(document.getElementById('Length').value)
****************************************
// Rule 2: HTML attribute/innerHTML = userInput
<Script>
// vulnerable js
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("Label").setAttribute('maxlength', fieldValue)
</Script>
// fix = var fieldValue=html_escape(document.getElementById('Length').value)

<Script>
  var fieldValue=document.getElementById('Length').value;
  document.getElementById("myDIV").innerHTML = fieldValue;
  var fieldValue=html_escape(document.getElementById('Length').value);
  document.getElementById("Label").setAttribute('maxlength', fieldValue);
</Script>
// will return no vulnerabilities because of multiple declaration of fieldValue
// to fix: change one of the variable names
// fixing syntax highlighter in react:app.js might indicate this to user
*****************************************
//Rule 3: Dynamic js
  //inside a quoted string
  <script>
    function myFunction() {
      //indicates vuln script: fixed by escaping js
      var testVar = document.getElementById("test").value;
      var script= document.createElement('script');
      script.innerHTML = "alert(\""+testVar+"\");";
      
      //indicates possible vuln script: fixed by js escape or *
      var testVar2 = document.getElementById("test").value;    
      myscript.innerHTML = "alert(\""+testVar2+"\");";      
    }
  </script>

  //inside a quoted expr
  <script>
  function myFunction() {
    //indicates vuln script: fixed by escaping js
    var fieldValue= document.getElementById("test").value;
    var script= document.createElement('script');
    script.innerHTML = "x=\'"+fieldValue+"\';";
    
    //indicates possible vuln script: fixed by js escape or *
    var fieldValue2= document.getElementById("test").value;
    script.innerHTML = "x=\'"+fieldValue2+"\';";
  }
</script>

//inside quoted event handler
<script>
  function myFunction() {
    //indicates vuln script: fixed by escaping js
    var testVar2 = document.getElementById("test").value;
    document.getElementById("p").onmouseover = "x=\'"+testVar2+"\'";
  }
</script>
*****************************************
//Rule 3.1 HTML escape JSON values in HTML context: read data with JSON.parse (http response)
//js http request
<script>
	//may be vulnerable
	const Http = new XMLHttpRequest();
	const xhr = new XMLHttpRequest();
	const url='https://jsonplaceholder.typicode.com/posts';
	Http.open("GET", url);
	xhr.open("GET", url);
	Http.send();

	Http.onreadystatechange = (e) => {
  		console.log(Http.responseText)
	}
	//ensure headers contain content-type: application/json
	var headers = Http.getAllResponseHeaders();
</script>